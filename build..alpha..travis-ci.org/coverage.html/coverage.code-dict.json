{"/tmp/npmtest/node-npmtest-grunt-bower-concat/test.js":"/* istanbul instrument in package npmtest_grunt_bower_concat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/tmp/npmtest/node-npmtest-grunt-bower-concat/lib.npmtest_grunt_bower_concat.js":"/* istanbul instrument in package npmtest_grunt_bower_concat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_bower_concat = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_bower_concat = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/tmp/npmtest/node-npmtest-grunt-bower-concat/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-bower-concat && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_bower_concat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_bower_concat\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_bower_concat.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_bower_concat.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_bower_concat.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_bower_concat.__dirname + '/lib.npmtest_grunt_bower_concat.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/tmp/npmtest/node-npmtest-grunt-bower-concat/node_modules/grunt-bower-concat/tasks/bower-concat.js":"/**\n * Concatenate installed Bower packages\n *\n * @author Artem Sapegin (http://sapegin.me)\n */\n\n\n/*jshint node:true */\nmodule.exports = function(grunt) {\n\t'use strict';\n\n\tvar path = require('path');\n\tvar fs = require('fs');\n\tvar filesize = require('filesize');\n\tvar bower = require('bower');\n\tvar detective = require('detective');\n\tvar async = require('async');\n\tvar _ = require('lodash');\n\t_.str = require('underscore.string');\n\tvar dependencyTools = require('../lib/dependencyTools');\n\tvar configTools = require('../lib/configTools');\n\n\tgrunt.registerMultiTask('bower_concat', 'Concatenate installed Bower packages.', function() {\n\t\tvar dests = configTools.extractDestData(this.data);\n\n\t\t// Require at least one of [`dest`, `cssDest`, `scssDest`]\n\t\tif (Object.keys(dests).length === 0) {\n\t\t\tthrow grunt.util.error('You should specify \"dest\" and/or \"cssDest\" properties in your Gruntfile.');\n\t\t}\n\n\t\tvar includes = ensureArray(this.data.include || []);\n\t\tvar excludes = ensureArray(this.data.exclude || []);\n\t\tvar dependencies = this.data.dependencies || {};\n\t\tvar mains = this.data.mainFiles || {};\n\t\tvar callback = this.data.callback;\n\t\tvar process = this.data.process;\n\t\tvar includeDev = this.data.includeDev === true;\n\t\tvar bowerOptions = this.data.bowerOptions || {};\n\t\tvar bowerDir = bowerOptions.relative !== false ? bower.config.cwd : '';\n\t\tvar options = this.options({\n\t\t\tseparator: grunt.util.linefeed\n\t\t});\n\n\t\tvar tasksOpen = dests.length;\n\n\t\tvar done = this.async();\n\t\tdests.forEach(function(destination) {\n\t\t\tbowerMainFiles(destination, function(files) {\n\t\t\t\tvar type = destination.assetType;\n\t\t\t\tif (type === 'js') {\n\t\t\t\t\tconcatenateAndWriteFile(files, destination.path, options.separator);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconcatenateAndWriteFile(files, destination.path);\n\t\t\t\t}\n\t\t\t\ttaskFinished();\n\t\t\t});\n\t\t});\n\n\t\t/**\n\t\t * As all Filetypes are now handled asynchronously this little helper waits\n\t\t * until every filetype is finished and will than call done()\n\t\t */\n\t\tfunction taskFinished() {\n\t\t\ttasksOpen--;\n\t\t\tif (tasksOpen === 0) {\n\t\t\t\tdone();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Concatenates and writes a file\n\t\t *\n\t\t * @param {Array} files File contents\n\t\t * @param {String} destination File destination\n\t\t * @param {String} separator Files joined on this string\n\t\t */\n\t\tfunction concatenateAndWriteFile(files, destination, separator) {\n\t\t\tif (!destination || !files || !files.length) return;\n\n\t\t\tfiles = _.map(files, process);\n\n\t\t\tvar src = files.join(separator || grunt.util.linefeed);\n\t\t\tgrunt.file.write(destination, src);\n\t\t\tgrunt.log.writeln('File ' + destination.cyan + ' created.');\n\t\t}\n\n\t\t/**\n\t\t * Finds suitable JS and CSS files for all installed Bower packages.\n\t\t *\n\t\t * @param {Array} Array of Destination Objects [{assetType: {String}, path: {String}}]\n\t\t * @param {Function} allDone function(bowerFiles) {}\n\t\t */\n\t\tfunction bowerMainFiles(destination, allDone) {\n\t\t\tasync.parallel({\n\t\t\t\tmap: bowerList('map'),\n\t\t\t\tcomponents: bowerList('paths')\n\t\t\t}, function(err, lists) {\n\t\t\t\t// Ensure all manual defined dependencies are contained in an array\n\t\t\t\tif (dependencies) {\n\t\t\t\t\t_.map(dependencies, function(value, key) {\n\t\t\t\t\t\tdependencies[key] = ensureArray(value);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Exclude devDependencies\n\t\t\t\tvar devDependencies = lists.map.pkgMeta.devDependencies;\n\t\t\t\tif (devDependencies && !includeDev) {\n\t\t\t\t\texcludes = excludes.concat(Object.keys(devDependencies));\n\t\t\t\t}\n\n\t\t\t\t// Resolve dependency graph to ensure correct order of components when concat them\n\t\t\t\tvar resolvedDependencies = resolveDependencies(lists.map);\n\n\t\t\t\t// List of main files\n\t\t\t\tvar files = {};\n\t\t\t\tvar groupStats = {};\n\n\t\t\t\t_.each(lists.components, function(component, name) {\n\t\t\t\t\tif (includes.length && _.indexOf(includes, name) === -1) return;\n\t\t\t\t\tif (excludes.length && _.indexOf(excludes, name) !== -1) return;\n\n\t\t\t\t\tvar mainFiles = findMainFiles(name, component, lists.map.dependencies[name]);\n\t\t\t\t\tif (mainFiles.length) {\n\t\t\t\t\t\tif (callback) mainFiles = callback(mainFiles, name);\n\n\t\t\t\t\t\tvar filteredMainFiles = mainFiles.filter(function(file) {\n\t\t\t\t\t\t\treturn isFileExtension(file, '.' + destination.assetType);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (grunt.option('verbose')) {\n\t\t\t\t\t\t\tgroupStats[name]  = filteredMainFiles.map(_.partial(toFileStats, name));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfiles[name] = filteredMainFiles.map(grunt.file.read);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Try to find and concat minispade package: packages/_name_/lib/main.js\n\t\t\t\t\t\tvar pkg = getNpmPackage(name, component);\n\t\t\t\t\t\tif (pkg) {\n\t\t\t\t\t\t\tfiles[name] = pkg;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tgrunt.log.error('Can’t detect any .' + destination.path + ' on main files for \"' +\n\t\t\t\t\t\t\t\tname + '\" component. ' +\n\t\t\t\t\t\t\t\t'You should explicitly define it via bower_concat’s mainFiles option. ' +\n\t\t\t\t\t\t\t\t'See Readme for details.'\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (grunt.option('verbose')) {\n\t\t\t\t\tlogGroupStats(destination.assetType, resolvedDependencies, destination.path, groupStats);\n\t\t\t\t\tgrunt.verbose.writeln();\n\t\t\t\t}\n\n\t\t\t\t// Gather files by respecting the order of resolved dependencies\n\t\t\t\tvar modules = [];\n\t\t\t\t_.each(resolvedDependencies, function(name) {\n\t\t\t\t\tif (files[name]) {\n\t\t\t\t\t\tmodules = modules.concat(files[name]);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tallDone(modules);\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Returns function that invokes `list` command of Bower API.\n\t\t * Should be used inside async.parallel.\n\t\t *\n\t\t * @param {String} kind map|paths\n\t\t * @return {Function}\n\t\t */\n\t\tfunction bowerList(kind) {\n\t\t\treturn function(done) {\n\t\t\t\tvar params = _.extend({}, bowerOptions);\n\t\t\t\tparams[kind] = true;\n\t\t\t\tbower.commands.list(params, {offline: true})\n\t\t\t\t\t.on('error', grunt.fail.fatal.bind(grunt.fail))\n\t\t\t\t\t.on('end', function(data) {\n\t\t\t\t\t\tdone(null, data);  // null means \"no error\" for async.parallel\n\t\t\t\t\t});\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Builds dependency graph.\n\t\t * See lib/dependencyTools.js.\n\t\t *\n\t\t * @param {Object} map Map from bower.commands.list(kind: map).\n\t\t * @return {Array}\n\t\t */\n\t\tfunction resolveDependencies(map) {\n\t\t\tvar dependencyGraph = dependencies || {};\n\t\t\tvar resolved = [];\n\t\t\tvar unresolved = [];\n\n\t\t\t// Build dependency graph\n\t\t\tif (map.dependencies) {\n\t\t\t\tdependencyTools.buildDependencyGraph(\n\t\t\t\t\tundefined,  // First recursion without a start value\n\t\t\t\t\tmap.dependencies,\n\t\t\t\t\tdependencyGraph\n\t\t\t\t);\n\n\t\t\t\t// Flatten/resolve the dependency tree\n\t\t\t\tdependencyTools.resolveDependencyGraph(\n\t\t\t\t\tundefined,  // First recursion without a start value\n\t\t\t\t\tresolved,\n\t\t\t\t\tunresolved,\n\t\t\t\t\tdependencyGraph\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn resolved;\n\t\t}\n\n\t\t/**\n\t\t * Finds main JS and CSS files for a component.\n\t\t *\n\t\t * @param {String} name Component name.\n\t\t * @param {Array|String} component Item from bower.commands.list(kind: list).\n\t\t * @param {Object} meta Item from bower.commands.list(kind: map).\n\t\t * @return {Array}\n\t\t */\n\t\tfunction findMainFiles(name, component, meta) {\n\t\t\tgrunt.verbose.writeln();\n\t\t\tgrunt.verbose.writeln('Finding main file for ' + name + '...');\n\t\t\tvar mainFiles = ensureArray(component);\n\n\t\t\t// Main file explicitly defined in bower_concat options\n\t\t\tif (mains[name]) {\n\t\t\t\tvar componentDir = meta && meta.canonicalDir || path.join(bowerDir, bower.config.directory, name);\n\t\t\t\tvar manualMainFiles = ensureArray(mains[name]);\n\t\t\t\tmanualMainFiles = _.map(manualMainFiles, joinPathWith(componentDir));\n\t\t\t\tgrunt.verbose.writeln('Main file was specified in bower_concat options: ' + manualMainFiles);\n\t\t\t\treturn manualMainFiles;\n\t\t\t}\n\n\t\t\t// Bower knows main JS file?\n\t\t\tmainFiles = _.map(mainFiles, joinPathWith(bowerDir));\n\t\t\tvar mainJSFiles = _.filter(mainFiles, function(file) { return isFileExtension(file, '.js'); });\n\t\t\tvar mainCSSFiles = _.filter(mainFiles, function(file) { return isFileExtension(file, '.css'); });\n\t\t\tvar mainSCSSFiles = _.filter(mainFiles, function(file) { return isFileExtension(file, '.scss'); });\n\t\t\tvar allMainFiles = mainJSFiles.concat(mainCSSFiles.concat(mainSCSSFiles));\n\n\t\t\tif (allMainFiles.length) {\n\t\t\t\tgrunt.verbose.writeln('Main file was specified in bower.json: ' + allMainFiles);\n\t\t\t\treturn allMainFiles;\n\t\t\t}\n\n\t\t\t// Try to find main JS, CSS, SCSS files\n\t\t\tvar jsFiles = expandForAll(component, joinPathWith(bowerDir, '*.js'));\n\t\t\tvar cssFiles = expandForAll(component, joinPathWith(bowerDir, '*.css'));\n\t\t\tvar scssFiles = expandForAll(component, joinPathWith(bowerDir, '*.scss'));\n\n\t\t\t// Skip Gruntfiles\n\t\t\tjsFiles = _.filter(jsFiles, function(filepath) {\n\t\t\t\treturn !/(Gruntfile\\.js)|(grunt\\.js)$/.test(filepath);\n\t\t\t});\n\n\t\t\tvar mainJsFiles = [];\n\t\t\tif (jsFiles.length === 1) {\n\t\t\t\t// Only one JS file: no doubt it’s main file\n\t\t\t\tgrunt.verbose.writeln('Considering the only JS file in a component’s folder ' +\n\t\t\t\t\t 'as a main file: ' + jsFiles\n\t\t\t\t\t\t);\n\t\t\t\tmainJsFiles = jsFiles;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// More than one JS file: try to guess\n\t\t\t\tvar bestFile = guessBestFile(name, jsFiles);\n\t\t\t\tif (bestFile) {\n\t\t\t\t\tgrunt.verbose.writeln('Guessing the best JS file in a component’s folder: ' + [bestFile]);\n\t\t\t\t\tmainJsFiles = [bestFile];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tgrunt.verbose.writeln('Main JS file not found');\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn mainJsFiles.concat(cssFiles);\n\t\t}\n\n\t\t/**\n\t\t * Returns concatenated npm package source code (tries to find package and concatenates source code).\n\t\t *\n\t\t * @param {String} name Component name.\n\t\t * @param {Array|String} component Item from bower.commands.list(kind: list).\n\t\t * @return {String}\n\t\t */\n\t\tfunction getNpmPackage(name, component) {\n\t\t\tvar pkg = findPackage(name, component);\n\t\t\tif (!pkg) return null;\n\n\t\t\tvar mainjs = path.join(pkg, 'lib/main.js');\n\t\t\tif (!fs.existsSync(mainjs)) return null;\n\n\t\t\treturn requirePackage(pkg, mainjs);\n\t\t}\n\n\t\t/**\n\t\t * Returns package path (packages/component-name/).\n\t\t *\n\t\t * @param {String} name Component name.\n\t\t * @param {Array|String} component Item from bower.commands.list(kind: list).\n\t\t * @return {String}\n\t\t */\n\t\tfunction findPackage(name, component) {\n\t\t\tvar packages = expandForAll(component, joinPathWith(null, 'packages/*'));\n\n\t\t\tif (packages.length === 0) {\n\t\t\t\t// No packages found\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\telse if (packages.length === 1) {\n\t\t\t\t// Only one package: return it\n\t\t\t\treturn packages[0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// More than one package: try to guess\n\t\t\t\treturn guessBestFile(name, packages);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Returns concatenated package source code.\n\t\t * Expands all `require()`s.\n\t\t *\n\t\t * @param {String} pkg Package path.\n\t\t * @param {String} mainjs Main JS file path.\n\t\t * @return {String}\n\t\t */\n\t\tfunction requirePackage(pkg, mainjs) {\n\t\t\tvar processed = {};\n\t\t\tvar pkgName = path.basename(pkg);\n\t\t\tvar code = grunt.file.read(mainjs);\n\t\t\twhile (true) {\n\t\t\t\tvar requires = detective(code);\n\t\t\t\tif (!requires.length) break;\n\t\t\t\tfor (var requireIdx in requires) {\n\t\t\t\t\tvar name = requires[requireIdx];\n\t\t\t\t\tvar requiredCode = '';\n\t\t\t\t\tif (!processed[name]) {\n\t\t\t\t\t\tvar filepath = path.join(pkg, 'lib', name.replace(pkgName + '/', '') + '.js');\n\t\t\t\t\t\trequiredCode = grunt.file.read(filepath);\n\t\t\t\t\t\tprocessed[name] = true;\n\t\t\t\t\t}\n\t\t\t\t\tcode = code.replace(new RegExp('require\\\\([\\\\\\'\\\"]' + name + '[\\\\\\'\\\"]\\\\);?'), requiredCode);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn code;\n\t\t}\n\n\t\t/**\n\t\t * Computing Levenshtein distance to guess a main file.\n\t\t * Based on https://github.com/curist/grunt-bower\n\t\t *\n\t\t * @param {String} componentName Component name.\n\t\t * @param {Array} files List of all possible main files.\n\t\t * @return {String}\n\t\t */\n\t\tfunction guessBestFile(componentName, files) {\n\t\t\tvar minDist = 1e13;\n\t\t\tvar minDistIndex = -1;\n\n\t\t\tfiles.sort(function(a, b) {\n\t\t\t\t// Reverse order by path length\n\t\t\t\treturn b.length - a.length;\n\t\t\t});\n\n\t\t\tfiles.forEach(function(filepath, i) {\n\t\t\t\tvar filename = path.basename(filepath, '.js');\n\t\t\t\tvar dist = _.str.levenshtein(componentName, filename);\n\t\t\t\tif (dist <= minDist) {\n\t\t\t\t\tminDist = dist;\n\t\t\t\t\tminDistIndex = i;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (minDistIndex !== -1) {\n\t\t\t\treturn files[minDistIndex];\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Returns an array as is, converts any other type to an array: [source].\n\t\t *\n\t\t * @param {Mixed} object\n\t\t * @return {Array}\n\t\t */\n\t\tfunction ensureArray(object) {\n\t\t\tif (Array.isArray(object))\n\t\t\t\treturn object;\n\t\t\telse\n\t\t\t\treturn [object];\n\t\t}\n\n\t\t/**\n\t\t * Runs grunt.file.expand for every array item and returns combined array.\n\t\t *\n\t\t * @param {Array|String} array Masks (can be single string mask).\n\t\t * @param {Function} makeMask function(mask) { return mask; }\n\t\t * @return {Array} All found files.\n\t\t */\n\t\tfunction expandForAll(array, makeMask) {\n\t\t\tvar files = [];\n\t\t\tensureArray(array).forEach(function(item) {\n\t\t\t\tfiles = files.concat(grunt.file.expand(makeMask(item)));\n\t\t\t});\n\t\t\treturn files;\n\t\t}\n\n\t\t/**\n\t\t * Path joiner function factory. Returns function that prepends `pathPart` with `prepend` and appends it with `append`.\n\t\t *\n\t\t * @param  {Array|String} [prepend] Path parts that will be added before `pathPart`.\n\t\t * @param  {Array|String} [append] Path parts that will be added after `pathPart`.\n\t\t * @return {Function} function(pathPart) {}\n\t\t */\n\t\tfunction joinPathWith(prepend, append) {\n\t\t\treturn function(pathPart) {\n\t\t\t\t// path.join(prepend..., pathPart, append...)\n\t\t\t\tvar params = ensureArray(prepend || []).concat([pathPart], ensureArray(append || []));\n\t\t\t\treturn path.join.apply(path, params);\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Check whether specified path exists, is a file and has .js extension.\n\t\t *\n\t\t * @param {String} filepath Path of a file.\n\t\t * @param {String} extension Extension to check for, including the`.`.\n\t\t * @return {Boolean}\n\t\t */\n\t\tfunction isFileExtension(filepath, extension) {\n\t\t\treturn typeof filepath === 'string' && path.extname(filepath) === extension && fs.existsSync(filepath) &&\n\t\t\t\tfs.lstatSync(filepath).isFile()\n\t\t\t\t;\n\t\t}\n\n\t\t/**\n\t\t * Get size of a file in readable format.\n\t\t *\n\t\t * @param {String} filepath Path of a file.\n\t\t * @param {Object} options [Optional] Filesize function flags.\n\t\t * @return {String} Readable file size.\n\t\t */\n\t\tfunction getFileSize(filepath, options) {\n\t\t\tvar stats = fs.statSync(filepath);\n\t\t\treturn filesize(stats.size, options);\n\t\t}\n\n\t\t/**\n\t\t * Wrap filepath with related component name and file size.\n\t\t *\n\t\t * @param {String} componentName Name of component related to a file.\n\t\t * @param {String} filepath Path of a file.\n\t\t * @return {Object} fileStats\n\t\t */\n\t\tfunction toFileStats(componentName, filepath) {\n\t\t\treturn {\n\t\t\t\tsrc: path.relative(bowerDir, filepath),\n\t\t\t\tcomponent: componentName,\n\t\t\t\tsize: getFileSize(filepath)\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Verbose print list of files for a group.\n\t\t *\n\t\t * @param {String} groupName Name of a files group.\n\t\t * @param {Array} groupOrder Order of components.\n\t\t * @param {String} groupDest Path to result of concatenation.\n\t\t * @param {Object} files Map of components fileStats\n\t\t */\n\t\tfunction logGroupStats(groupName, groupOrder, groupDest, files) {\n\t\t\tif (!groupDest) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (!grunt.option('no-color')) {\n\t\t\t\tgroupDest = groupDest.cyan;\n\t\t\t}\n\n\t\t\tgrunt.verbose.subhead('%s: -> %s', groupName, groupDest);\n\n\t\t\tgroupOrder.forEach(function(component) {\n\t\t\t\tif (_.isArray(files[component]) && files[component].length) {\n\t\t\t\t\tfiles[component].forEach(function(file) {\n\t\t\t\t\t\tif (!grunt.option('no-color')) {\n\t\t\t\t\t\t\tfile.component = file.component.yellow;\n\t\t\t\t\t\t\tfile.size = file.size.green;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgrunt.verbose.writeln('  ./%s [%s] - %s', file.src, file.component, file.size);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n};\n","/tmp/npmtest/node-npmtest-grunt-bower-concat/node_modules/grunt-bower-concat/Gruntfile.js":"/*jshint node:true*/\nmodule.exports = function(grunt) {\n\t'use strict';\n\n\tvar _ = require('lodash');\n\n\trequire('load-grunt-tasks')(grunt);\n\n\tgrunt.initConfig({\n\t\tbower_concat: {\n\t\t\tbasic: {\n\t\t\t\tdest: 'test/tmp/basic.js',\n\t\t\t\texclude: 'jquery',\n\t\t\t\tdependencies: {\n\t\t\t\t\t'backbone': 'underscore',\n\t\t\t\t\t'jquery-mousewheel': 'jquery'\n\t\t\t\t},\n\t\t\t\tmainFiles: {\n\t\t\t\t  'svg.js': 'dist/svg.js'\n\t\t\t\t}\n\t\t\t},\n\t\t\tnonrelative: {\n\t\t\t\tdest: 'test/tmp/nonrelative.js',\n\t\t\t\texclude: 'jquery',\n\t\t\t\tdependencies: {\n\t\t\t\t\t'backbone': 'underscore',\n\t\t\t\t\t'jquery-mousewheel': 'jquery'\n\t\t\t\t},\n\t\t\t\tmainFiles: {\n\t\t\t\t  'svg.js': 'dist/svg.js'\n\t\t\t\t},\n\t\t\t\tbowerOptions: {\n\t\t\t\t\trelative: false\n\t\t\t\t}\n\t\t\t},\n\t\t\tcallback: {\n\t\t\t\tdest: 'test/tmp/callback.js',\n\t\t\t\texclude: 'jquery',\n\t\t\t\tdependencies: {\n\t\t\t\t\t'backbone': 'underscore',\n\t\t\t\t\t'jquery-mousewheel': 'jquery'\n\t\t\t\t},\n\t\t\t\tmainFiles: {\n\t\t\t\t  'svg.js': 'dist/svg.js'\n\t\t\t\t},\n\t\t\t\tcallback: function(mainFiles, component) {\n\t\t\t\t\treturn _.map(mainFiles, function(filepath) {\n\t\t\t\t\t\tvar min = filepath.replace(/\\.js$/, '.min.js');\n\t\t\t\t\t\treturn grunt.file.exists(min) ? min : filepath;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\twithCss: {\n\t\t\t\tdest: {\n\t\t\t\t\tjs: 'test/tmp/with-css.js',\n\t\t\t\t\tcss: 'test/tmp/with-css.css'\n\t\t\t\t},\n\t\t\t\texclude: 'jquery',\n\t\t\t\tdependencies: {\n\t\t\t\t\t'backbone': 'underscore',\n\t\t\t\t\t'jquery-mousewheel': 'jquery'\n\t\t\t\t},\n\t\t\t\tmainFiles: {\n\t\t\t\t  'svg.js': 'dist/svg.js',\n\t\t\t\t  'social-likes': ['social-likes.min.js', 'social-likes.css']\n\t\t\t\t}\n\t\t\t},\n\t\t\tonlyCss: {\n\t\t\t\tdest: {\n\t\t\t\t\tcss: 'test/tmp/with-css.css'\n\t\t\t\t},\n\t\t\t\texclude: 'svg.js',\n\t\t\t\tmainFiles: {\n\t\t\t\t  'social-likes': ['social-likes.css']\n\t\t\t\t}\n\t\t\t},\n\t\t\tscss: {\n\t\t\t\tdest: {\n\t\t\t\t\tscss: 'test/tmp/scss.scss'\n\t\t\t\t}\n\t\t\t},\n\t\t\tinclude: {\n\t\t\t\tdest: 'test/tmp/include.js',\n\t\t\t\tinclude: [\n\t\t\t\t\t'backbone',\n\t\t\t\t\t'jquery-mousewheel'\n\t\t\t\t],\n\t\t\t\tdependencies: {\n\t\t\t\t\t'backbone': 'underscore',\n\t\t\t\t\t'jquery-mousewheel': 'jquery'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmochaTest: {\n\t\t\ttest: {\n\t\t\t\toptions: {\n\t\t\t\t\treporter: 'spec'\n\t\t\t\t},\n\t\t\t\tsrc: ['./test/lib/*.js', './test/*.js']\n\t\t\t}\n\t\t},\n\t\tjshint: {\n\t\t\toptions: {\n\t\t\t\tjshintrc: '.jshintrc'\n\t\t\t},\n\t\t\tall: [\n\t\t\t\t'tasks/**/*.js',\n\t\t\t\t'lib/**/*.js'\n\t\t\t],\n\t\t},\n\t\tjscs: {\n\t\t\tall: [\n\t\t\t\t'tasks/**/*.js',\n\t\t\t\t'lib/**/*.js'\n\t\t\t],\n\t\t},\n\t\tclean: ['test/tmp']\n\t});\n\n\tgrunt.loadTasks('tasks');\n\n\tgrunt.registerTask('test', ['mochaTest']);\n\tgrunt.registerTask('default', ['jshint', 'jscs', 'clean', 'bower_concat', 'test', 'clean']);\n\tgrunt.registerTask('build', ['default']);\n};\n","/tmp/npmtest/node-npmtest-grunt-bower-concat/node_modules/grunt-bower-concat/lib/configTools.js":"'use strict';\n\n\nfunction destinationConfigExists(data) {\n\tif (data.dest) {\n\t\treturn data.dest instanceof Object || typeof data.dest === 'string';\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns all dest, cssDest, jsDest, scssDest ... Configs\n *\n * @param {Object} an Object  of possible configs wich should be filtered and extracted\n *\n * @return {Array} the config prefix (or file extension). For example css for cssDest, or js for dest.\n */\nfunction extractDestData(data) {\n\n\tif (destinationConfigExists(data)) {\n\t\tif (data.dest instanceof Object) {\n\t\t\treturn extractMultiDestValues(data.dest);\n\t\t}\n\t\telse {\n\t\t\treturn extractBackportDestination(data.dest);\n\t\t}\n\t}\n\n\treturn [];\n}\n\n/**\n * Extract all destination values from config for the given schema:\n *\t {\n *\t\tcss: '/tmp/css.css',\n *\t\tjs: '/tmp/js.js'\n *\t}\n *\n *\tand will turn it into:\n *\t[\n *\t\t{'assetType': css, 'path': '/tmp/css.css},\n *\t\t{'assetType': js, 'path': '/tmp/js.js}\n *\t]\n *\n * @param {Object} of all destinations\n *\n * @return {Array}\n */\nfunction extractMultiDestValues(destinations) {\n\tvar destinationConfigs = [];\n\n\tObject.keys(destinations).forEach(function(key) {\n\t\tdestinationConfigs.push(\n\t\t\t{'assetType': key, 'path': destinations[key]}\n\t\t);\n\t});\n\n\treturn destinationConfigs;\n}\n\n/**\n * Extract the destination of the old fashioned of version 0.6.0\n * like dest: '/tmp/js.js'\n *\n * Actually this only puts the given destination into an Array of Objects to\n * fit to the new datastructure of destinations.\n *\n * @param {String} path of the JS destination file\n *\n * @return {Array} with exact one element.\n */\nfunction extractBackportDestination(destination) {\n\treturn [{'assetType': 'js', 'path': destination}];\n}\n\n/**\n * Extracts all the values of an Object. For example if you pass:\n *\t {'key1': 'value1', 'key2': 'value2'}\n *\t it will return: ['value1', 'value2']\n *\n * @param an standart JS-Object.\n *\n * @return all the values of an object\n */\nfunction getValues(object) {\n\tvar values = [];\n\tObject.keys(object).forEach(function(key) {\n\t\tvalues.push(object[key]);\n\t});\n\n\treturn values.reverse();\n}\n\n\nmodule.exports = {\n\textractDestData:  extractDestData,\n\tgetValuesOfObject: getValues,\n\tdestinationConfigExists: destinationConfigExists\n};\n","/tmp/npmtest/node-npmtest-grunt-bower-concat/node_modules/grunt-bower-concat/lib/dependencyTools.js":"/**\n * Builds up a dependency graph for using a simple object structure containing the modules as keys and using arrays\n * as dependecy descriptors.\n */\n\nfunction buildDependencyGraph(module, dependencies, graph) {\n\tif (module && !graph[module]) {\n\t\tgraph[module] = [];\n\t}\n\n\tvar dependencyNames = Object.keys(dependencies);\n\tdependencyNames.forEach(function(dependencyName) {\n\t\tvar dependency = dependencies[dependencyName];\n\n\t\tif (module && graph[module].indexOf(dependencyName) === -1) {\n\t\t\tgraph[module].push(dependencyName);\n\t\t}\n\n\t\t// Traverse down to this dependency dependencies:\n\t\t// Dependency-ception.\n\t\tif (dependency.dependencies) {\n\t\t\tbuildDependencyGraph(dependencyName, dependency.dependencies, graph);\n\t\t}\n\t});\n}\n\n/**\n * Resolves a graph of dependencies into a flat, ordered array.\n *\n * The arrays ordering ensures, that a dependecy of another module comes before the module itself.\n *\n * This algorithem is adapted from the pseudo code example available here:\n * http://www.electricmonk.nl/log/2008/08/07/dependency-resolving-algorithm/\n */\nfunction resolveDependencyGraph(module, resolved, unresolved, dependencies) {\n\tvar moduleDependencies;\n\tif (module) {\n\t\tmoduleDependencies = dependencies[module];\n\t\tif (!moduleDependencies) {\n\t\t\tthrow new Error('Component ' + module + ' not installed. Try bower install --save ' + module);\n\t\t}\n\t\tunresolved.push(module);\n\t}\n\telse {\n\t\tmoduleDependencies = Object.keys(dependencies);\n\t}\n\n\tmoduleDependencies.forEach(function(moduleDependency) {\n\t\tif (resolved.indexOf(moduleDependency) === -1) {\n\t\t\tif (unresolved.indexOf(moduleDependency) !== -1) {\n\t\t\t\tthrow new Error('Circular reference detected for ' + module + ' - ' + moduleDependency);\n\t\t\t}\n\n\t\t\tresolveDependencyGraph(moduleDependency, resolved, unresolved, dependencies);\n\t\t}\n\t});\n\n\tif (module) {\n\t\tresolved.push(module);\n\t\tunresolved = unresolved.splice(unresolved.indexOf(module), 1);\n\t}\n}\n\n\nmodule.exports = {\n\tbuildDependencyGraph: buildDependencyGraph,\n\tresolveDependencyGraph: resolveDependencyGraph\n};\n"}